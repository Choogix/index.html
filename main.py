# import telebot
# import webbrowser
# from telebot import types

# bot = telebot.TeleBot('8327887897:AAFvap9nzXkFUgc46ao6Zgc5PZCpEHL09dw')

# @bot.message_handler(commands=['site', 'website'])
# def site (message):
#     webbrowser.open('https://www.google.com')
#
#
#
# @bot.message_handler(commands=['start', 'help', 'main'])
# def send_welcome(message):
#     bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name}')
#
#
# @bot.message_handler(commands=['help'])
# def send_welcome(message):
#     bot.send_message(message.chat.id, '<b>–ü–æ–º–æ–≥–∏ –º–Ω–µ</b>', parse_mode='html')
#
#
#
# @bot.message_handler(commands=['hello'])
# def send_welcome(message):
#     bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –≤—Å–µ–≥–æ –ª–∏—à—å –º–∞–ª–µ–Ω—å–∫–∞—è –∫–æ—à–µ—á–∫–∞')
#
# @bot.message_handler()
# def echo(message):
#     if message.text.lower() == 'hello':
#         bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name}')
#     elif message.text.lower() == 'id':
#         bot.reply_to(message, f'ID: {message.from_user.id}')


# @bot.message_handler(commands=['start'])
# def start(message):
#     markup = types.ReplyKeyboardMarkup()
#     btn1 = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')
#     markup.row(btn1)
#     btn2 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ')
#     btn3 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç')
#     markup.row(btn2, btn3)
#     file = open('./main1.jpg', 'rb')
#     bot.send_photo(message.chat.id, file, reply_markup=markup)
#     # bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç', reply_markup=markup)
#     bot.register_next_step_handler(message, on_click)
#
# def on_click(message):
#     if message.text == '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç':
#         bot.send_message(message.chat.id, 'Website is open')
#     elif message.text == '–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ':
#         bot.send_message(message.chat.id, 'Photo is delete')
#
#
# @bot.message_handler(content_types=['photo', 'audio'])
# def get_photo(message):
#     markup = types.InlineKeyboardMarkup()
#     btn1= types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url='https://google.com')
#     markup.row(btn1)
#     btn2= types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ', callback_data="delete")
#     btn3=types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data="edit")
#     markup.row(btn2 , btn3)
#     bot.reply_to(message, '–ö–∞–∫–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ', reply_markup=markup)
#
# @bot.callback_query_handler(func=lambda call: True)
# def callback(call):
#     if call.data == 'delete':
#         bot.delete_message(call.message.chat.id, call.message.message_id - 1)
#     elif call.data == 'edit':
#         bot.edit_message_text('Edit text', call.message.chat.id, call.message.message_id)
#
#
#
# bot.polling(none_stop=True)


# import telebot
# import sqlite3
#
# bot = telebot.TeleBot('8327887897:AAFvap9nzXkFUgc46ao6Zgc5PZCpEHL09dw')
# name = None
#
#
# @bot.message_handler(commands=['start'])
# def send_welcome(message):
#     conn = sqlite3.connect('user.sql')
#     cur = conn.cursor()
#
#     cur.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, password TEXT)')
#     conn.commit()
#     cur.close()
#     conn.close()
#
#     bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Å–µ–π—á–∞—Å —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
#     bot.register_next_step_handler(message, user_name)
#
# def user_name(message):
#     global name
#     name = message.text.strip()
#     bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
#     bot.register_next_step_handler(message, user_password)
#
#
# def user_password(message):
#     password = message.text.strip()
#     conn = sqlite3.connect('user.sql')
#     cur = conn.cursor()
#
#     cur.execute("INSERT INTO users (name, password) VALUES (?, ?)", (name, password))
#     conn.commit()
#     cur.close()
#     conn.close()
#
#     markup = telebot.types.InlineKeyboardMarkup()
#     markup.add(telebot.types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='users'))
#
#     bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚úÖ', reply_markup=markup)
#
# @bot.callback_query_handler(func=lambda call: call.data == 'users')
# def callback(call):
#     conn = sqlite3.connect('user.sql')
#     cur = conn.cursor()
#
#     cur.execute('SELECT * FROM users')
#     users = cur.fetchall()
#
#     info = ''
#     for el in users:
#         info+=f'–ò–º—è: {el[1]}, –ø–∞—Ä–æ–ª—å: {el[2]}\n'
#
#     cur.close()
#     conn.close()
#     bot.send_message(call.message.chat.id, info)
#
#     markup = telebot.types.InlineKeyboardMarkup()
#     markup.add(telebot.types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='users'))
#     # bot.send_message(call.message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=markup)
#
#
# bot.polling(none_stop=True)


# import telebot
# import requests
# import json
#
# bot = telebot.TeleBot('8327887897:AAFvap9nzXkFUgc46ao6Zgc5PZCpEHL09dw')
# API = 'd319b58e7b8c1b1e73e5824747b38553'
#
#
#
# @bot.message_handler(commands=['start'])
# def send_welcome(message):
#     bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–µ.')
#
# @bot.message_handler(content_types=['text'])
# def get_weather(message):
#     city = message.text.strip().lower()
#     res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API}&units=metric')
#     # bot.reply_to(message, f'–°–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞: {res.json()}')
#
#     if res.status_code == 200:
#
#         data = json.loads(res.text)
#         templ = data['main']['temp']
#         bot.reply_to(message, f'–°–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞: {templ} ')
#
#         image = 'i.png' if templ >5.0 else 'i2.png'
#         file = open('./' +image, 'rb')
#         bot.send_photo(message.chat.id, file)
#     else:
#         bot.reply_to(message, f'–ì–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ!')
#
# bot.polling(none_stop=True)





# import telebot
# from currency_converter import CurrencyConverter
# from telebot import types
#
# bot = telebot.TeleBot('8327887897:AAFvap9nzXkFUgc46ao6Zgc5PZCpEHL09dw')
# currency = CurrencyConverter()
# amount = 0
#
#
# @bot.message_handler(commands=['start'])
# def start(message):
#     bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ')
#     bot.register_next_step_handler(message, summa)
#
#
# def summa(message):
#     global amount
#     try:
#         amount = int(message.text.strip())
#     except ValueError:
#         bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–ø–µ—à–∏—Ç–µ —Å—É–º–º—É!')
#         bot.register_next_step_handler(message, summa)
#         return
#
#     if amount > 0:
#         markup = types.InlineKeyboardMarkup(row_width=2)
#         btn1 = types.InlineKeyboardButton('USD/EUR', callback_data='usd/eur')
#         btn2 = types.InlineKeyboardButton('EUR/USD', callback_data='eur/usd')
#         btn3 = types.InlineKeyboardButton('USD/GBP', callback_data='usd/gbp')
#         btn4 = types.InlineKeyboardButton('–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', callback_data='else')
#         markup.add(btn1, btn2, btn3, btn4)
#         bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –≤–∞–ª—é—Ç: ', reply_markup=markup)
#     else:
#         bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–ø–µ—à–∏—Ç–µ —Å—É–º–º—É!')
#         bot.register_next_step_handler(message, summa)
#
#
# @bot.callback_query_handler(func=lambda call: True)
# def callback(call):
#     if call.data !='else':
#         values = call.data.upper().split('/')
#         res = currency.convert(amount, values[0], values[1])
#         bot.send_message(call.message.chat.id, f'–ü–æ–ª—É—á–∞–µ—Ç—Å—è: {res:.2f}. –ú–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å—É–º–º—É.')
#         bot.register_next_step_handler(call.message, summa)
#     else:
#         bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–ª–µ—à: ')
#         bot.register_next_step_handler(call.message, my_currency)
#
#
# def my_currency(message):
#     try:
#         values = message.text.upper().split('/')
#         res = currency.convert(amount, values[0], values[1])
#         bot.send_message(message.chat.id, f'–ü–æ–ª—É—á–∞–µ—Ç—Å—è: {res:.2f}. –ú–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å—É–º–º—É.')
#         bot.register_next_step_handler(message, summa)
#     except ValueError:
#         bot.send_message(message.chat.id, f'–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–ø–∏—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ: ')
#         bot.register_next_step_handler(message, my_currency)
#
#
#
# bot.polling(none_stop=True)


# import asyncio
# import logging
# from aiogram import Bot, Dispatcher, types
# from aiogram.filters import Command
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
#
# # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
# logging.basicConfig(level=logging.INFO)
# logger = logging.getLogger(__name__)
#
# TOKEN = "8327887897:AAFvap9nzXkFUgc46ao6Zgc5PZCpEHL09dw"
#
# bot = Bot(token=TOKEN)
# dp = Dispatcher()
#
#
# @dp.message(Command("start"))
# async def cmd_start(message: types.Message):
#     await message.reply("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üëã")
#
#
# @dp.message()
# async def any_message(message: types.Message):
#     markup = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="Site üåê", url="https://google.com")],
#         [InlineKeyboardButton(text="Hello üëã", callback_data="hello")]
#     ])
#     await message.reply("–í—ã–±–µ—Ä–∏:", reply_markup=markup)
#
#
# @dp.callback_query(lambda c: c.data == "hello")
# async def cb_hello(callback: types.CallbackQuery):
#     # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∫—Ä—É—Ç–∏–ª–∫—É" —É –∫–Ω–æ–ø–∫–∏
#     await callback.answer("–ù–∞–∂–∞–ª!")
#     await callback.message.answer("–¢—ã –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É Hello")
#
# @dp.message(Command("hello"))
# async def reply(message: types.Message):
#     markup = ReplyKeyboardMarkup(
#         keyboard=[
#             [KeyboardButton(text="Site")]
#         ],
#         one_time_keyboard=True,
#         resize_keyboard=True
#     )
#
#     await message.answer("Hello", reply_markup=markup)
#
#
#
# async def main():
#     try:
#         logger.info("–ó–∞–ø—É—Å–∫ polling...")
#         # —Å—Ç–∞—Ä—Ç –ø–æ–ª–ª–∏–Ω–≥–∞ —Å –±–æ—Ç–æ–º
#         await dp.start_polling(bot)
#     except Exception:
#         logger.exception("–û—à–∏–±–∫–∞ –≤ polling")
#     finally:
#         # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é aiohttp
#         await bot.session.close()
#         logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
#
#
# if __name__ == "__main__":
#     asyncio.run(main())

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, WebAppInfo


TOKEN = "8327887897:AAFvap9nzXkFUgc46ao6Zgc5PZCpEHL09dw"

bot = Bot(token=TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def start_command(message: types.Message):
    # –ö–Ω–æ–ø–∫–∞ —Å web_app ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è web_app, –∞ –Ω–µ web_add/webApp –∏ —Ç.–ø.
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É",
                    web_app=WebAppInfo(url="https://choogix.github.io/index.html/")  # –ª—É—á—à–µ https
                )
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚úÖ", reply_markup=kb)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())






